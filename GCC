Hello there!
This file will be all my learnings that I have gathered over the years for GCC GNU.
My main source of motivation for doing this came from this book: An Introduction to GCC by Brian J. Gough.
Hope you enjoy it!

Note: While you compile code, deliberately give errors - to see how the compiler behaves, what it throws at you. 
Go to the extent of knowing what happens line by line. 
Remeber, you can be asked anything and everything!

1. Introduction:

Let's execute a simple c file called hello.c 
Code:
............................
#include <stdio.h>

int main()
{
	printf("Hello world!");
	return 0;
}
............................

We use the following cmd to have this compiled. Note, open cmd in the same directory as hello.c
$ gcc -Wall hello.c -o hello

What this does is, it compiles the source code to machine code and then stores it in an executable file called hello
So machine code is specified by -o, which is usually given at the end of the cmd (last arg)
If you don't mention it, default it will be a.exe ($ gcc -Wall hello.c)

-Wall usually would turn all the compiler warnings, so use it all the time.
Don't believe me, see why :)

Say this is what you write in your C program:
...........................
#include <stdio.h>

int main()
{
	int x;
	printf("Hello world!%d",x);
	return 0;
}
..........................

Here, x is used/declared, but not initialised. So if you use -Wall, you'd get this:
-------------------------
hello.c:6:9: warning: 'x' is used uninitialized [-Wuninitialized]
    6 |         printf("Hello world!%d",x);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
hello.c:5:13: note: 'x' was declared here
    5 |         int x;
      |             ^
-------------------------
The warning may most likely be due to garbage value stored in x

When you type .\hello or just hello, that'll load the .exe file to memory and would cause the CPU to begin executing instructions in that exe file.
The path .\ refers to current directory.

Let's look at another example:

.........................
#include <stdio.h>

int main()
{
	printf("Two plus two equals: %f\n", 4);
	return 0;
}
.........................

Here, when you add -Wall, you get this:

--------------------------
hello.c: In function 'main':
hello.c:5:39: warning: format '%f' expects argument of type 'double', but argument 2 has type 'int' [-Wformat=]
    5 |         printf("Two plus two equals: %f\n", 4);
      |                                      ~^     ~
      |                                       |     |
      |                                       |     int
      |                                       double
      |                                      %d
--------------------------
Here, everything looks good, except that the arg 1 is float/double, but arg 2 is int. 
The format string is used incorrectly. 
Also, notice the way how the error is mentioned:
file:line-number:message -> hello.c:5:39
Also complier will distinguish b/w error msg - this prevents successful compilation; and warning msg - indicates possible errors but wont stop prog from compiling

Say if you didn't use -Wall, what happens then? Let's see
....................................
C:\Users\rnasar\Desktop\code\c>hello
Two plus two equals: 0.000000
....................................

Here, the format specifier is incorrect, that corrupts the output since the func printf is passed as int instead of float. 
Int and float are stored in different formats in memory and occupy different bytes - this ofc depends on platform and env.
What do I mean by platform and env?

1. Different systems may use different endianess - so a misinterpreted int as float may result in different byte order
2. Some archs pass func arg as reg (x86-64 uses system V ABI) while others use stack (old x86 32 bit systems) - so behavior may depend whether int is stored in float reg or not.
3. Size of datatype could also vary, in 32 bit both int and float are 4 bytes, but in 64 bit float is 8 - now printf can promote float to double, but can't do int to double so interpetation can go wrong
4. 

Well if you don't use the func correctly, the system may produce incorrect results, or may even crash. So be careful!

2. Compiling multiple source files.

Example - 1: I'll split my file into three files: hello.c, hello_func.c, and hello.h

------------------------------
//This is hello.c
#include "hello.h"

int main()
{
	hello("world");
	return 0;
}
------------------------------
//This is hello.h

void hello(const char * name);
------------------------------
//This is hello_func.C

#include <stdio.h>
#include "hello.h"

void hello(const char * name)
{
	printf("Hello, %s!", name);
}
------------------------------

Compile all these using: 
$ gcc -Wall hello.c hello_func.c -o newhello

Why do we declare a function?
We do that to ensure that the types of args and return value match correctly b/w function call and function declaration.

What is the difference b/w #include<hello.h> and #include"hello.h"?
<> will search for the header file in the system header files
"" will search within the current directory first, then goes to the system directory

Why don't I include hello.h in the cmd line?
The directive #include "hello.h" in the src file instructs the compiler to include it automatically at approporiate locations

2.1 Compiling files independently
This is the best way to avoid running everything over and over again.
Say if your entire program was in a single file, then you'd have to recompile that program if you slightly even changed something.
So the best option is to split the program to independent source files.

In here, the src files are complied seperately, then linked together - 2 stage
1st stage - compile all src files seperately without creating an exe. This is called object file (-o)
2nd stage - object files are merged together by a seperate program caled linker. Linker combines all obj files together to create a single exe.

Obj file contains machine code where any reference to mem add of func (or variable) in other files is undefined. 
That allows src files to be compiled without direct reference to each other
So what happens is that it leaves placeholders (undefined references) for missing addresses. 
Linker does the job of filling these missing addresses when it produces the executable

Example - 2: Say you have three files, main.c, math_func.c and math_func.h

------------------------------
//This is math_func.c
#include "math_func.h"

int add(int a, int b)
{
	return a+b;
}
------------------------------
//This is math_func.h
#ifndef MATH_FUNC.H
#define MATH_FUNC.H

int add(int a, int b);

#endif 
------------------------------
//This is the main.c
#include <stdio.h>
#include "math_func.h"

int main()
{
	int result = add(5,3);
	printf("Result: %d",result);
	return 0;
}
------------------------------

Now if you have to compile them, we do it in this way
$ gcc -Wall -c main.c //This create the object file without -o mention
OR
$gcc -c main.c -o main.o //This creates it with -o mention

This is because of the -c flag, which automatically creates the obj file bearing the same name as the file. 

Similarly, we do:
$gcc -Wall -c math_func.c

You should get main.o and math_func.o
Now, you need to link the object files, that is done by linker.
$ gcc -Wall main.o math_func.o -o myprogram
Now, you get an exe called myprogram.

Wanna see an example where linker fails? That's also there!
Say you have main.c, math_func.h but not math_func.C (where you define the add fn)
You will get this:
..............................................
main.c:(.text+0x18): undefined reference to `add'
collect2.exe: error: ld returned 1 exit status
..............................................

Do check how a compiler works later on! I think I should be covering in this page itself.

See how the errors throws something called ld, what is that?
For performing the linking step, gcc uses linker ld which is a seperate program.
in GNU systems, the GNU linker - GNU ld is used.
Other systems may use GNU linker with GCC or may have their own linkers.

Generally in unix systems the order of searching functions is from left to right. 
Which means, the obj which contains the def of a fn should appear after that function is called. 

Take Example 1, over there, hello.c is calling hello_func.c so the oder should be 
$ gcc hello.o hello_func.o -o hello

Sometimes if you shuffle it, you may get something like this:
...................................................
$ gcc hello_fn.o hello.o -o hello (incorrect order)
hello.o: In function ‘hello’:
hello.o(.text+0xf): undefined reference to ‘hello’
..................................................

Since there is no obj file containing hello after main.o, it throws an error.
But most of the timer, compliers will search all obj files. So not a problemo!
Also, you can automate the recompiling of just the modified files by GNU Make

2.2 Linking with external libraries.


















